{"version":3,"sources":["components/result.js","components/buttons.js","components/content.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["result","props","state","react_default","a","createElement","className","initial","value","button","onClick","click","content","buttons","values","container","buttonvalues","operators","value1","value2","active","operation","operator","val1","val2","res","parseInt","reset","_this","setState","update","e","includes","target","Object","toConsumableArray","concat","valus","join","_this2","this","components_result","map","element","components_content","key","Component","App","components_container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d61e1aa2.chunk.js","sourcesContent":["import  React from 'react'\n\nconst result = (props) => {\n    if(props.state==='initial'){\n        return(\n        \n            <div className='result'>\n                {props.initial}\n            </div>\n       \n    )\n    }else if(props.state===false){\n        return(\n        \n            <div className='result'>\n                {props.result}\n            </div>\n       \n    )\n    }else{\n        return(\n        \n            <div className='result'>\n                {props.value}\n            </div>\n      \n    )\n    }\n   \n}\n\n\nexport default result","import  React from 'react'\n\nconst result = (props) => {\n            return(\n                <button value={props.button} onClick={props.click}>{props.button}</button>         \n            )\n}\n\n\nexport default result","import  React from 'react'\nimport Button from './buttons'\n\n   const content = (props) => {\n        return(\n            <Button click={props.click} values={props.values} button={props.button}/>       \n                \n        )\n        \n    }\n\nexport default content","import  React, { Component } from 'react'\nimport Result from './result'\nimport Content from './content'\n\nclass container extends Component{\n\n    state = {\n        buttonvalues:[1,2,3,4,5,6,7,8,9,0,'*','/','+','-','=','CE'],\n        buttons:[1,2,3,4,5,6,7,8,9,0],\n        operators:['*','/','+','-'],\n        value1:'',\n        value2:'',\n        value:'',\n        initial:'0',\n        result: '',\n        active:'initial'\n    }\n\n    operation = (operator,val1,val2) => {  \n        \n        switch(operator){\n            case '*':\n            let res = (val1*val2)      \n            return res\n            case '+':\n            res = (parseInt(val1,10)+parseInt(val2,10))      \n            return res\n            case '-':\n            res = (val1-val2)      \n            return res\n            case '/':\n            res = (val1/val2)      \n            return res\n            default:\n        }\n        \n            \n    }\n\n    reset = () => {\n        this.setState({\n            value:'',      \n        })\n    }\n\n    update = e => {\n        if((this.state.buttons.includes(parseInt(e.target.value,10)) && (this.state.value!==''))){      \n            this.reset()\n            this.setState({ \n                value: [...e.target.value],\n                active:true\n            })   \n        }else if(this.state.buttons.includes(parseInt(e.target.value,10))){\n            \n            this.setState({ \n                value: [...this.state.value,...e.target.value],\n                active:true\n            })   \n        }else if(this.state.operators.includes(e.target.value)){\n            let value=this.state.value;\n            if(this.state.value1===''){\n                this.setState({\n                    active:true,\n                    value1: value,\n                    operator:e.target.value,\n                })\n            }else{\n                this.setState({\n                    active:true,\n                    value2: value,\n                    operator:e.target.value,\n                })\n            }\n        }else if (e.target.value === '=' && this.state.res!==''){\n            let values=this.state.value;\n            let valus=this.state.result;\n            let res = this.operation(this.state.operator,this.state.value1,values)\n            this.setState({\n                active:false,\n                result:res,\n                value2: valus,\n                value1: res,\n                value: res\n            })\n            \n        }\n        else if(e.target.value === '='){\n            let values=this.state.value;\n            let valus=this.state.result;\n            let res = this.operation(this.state.operator,this.state.value1.join(''),values.join(''))\n            this.setState({\n                active:false,\n                result:res,\n                value2: valus,\n                value1: res,\n                value: res\n            })\n            \n        }else{\n            this.reset()\n            this.setState({\n                value1:'',\n                value2:'',\n                value:'',\n                initial:'0',\n                result: '',\n                active:'initial'\n            })\n        }\n          \n    }\n\n\n    render(){\n        \n        return(\n            \n                <div className='container'>\n                <p> React Calculator</p>\n                    <Result  value={this.state.value} result={this.state.result} initial={this.state.initial} state={this.state.active}/>\n                    <div className='content'>\n                    {\n                        this.state.buttonvalues.map(element=>\n                            <Content key={element} click={this.update} reset={this.reset} button={element} values={this.state}/>\n                        )\n                       \n                    }\n                    </div>\n                </div>\n            \n        )\n    }\n}\n\nexport default container","import React, { Component } from 'react';\nimport './App.css';\nimport Container from './components/container'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}